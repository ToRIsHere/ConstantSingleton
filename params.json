{"name":"Constantswiftsingleton","tagline":"Swift, Singleton pattern","body":"# Constant Singleton by Swift\r\n[Singleton pattern](http://www.galloway.me.uk/tutorials/singleton-classes/) is a design pattern that restricts \r\nthe instance of a class to only one object. \r\n\r\n## When to use\r\nWhen you wanted to share data between different parts of code, instead of having to pass the data around. For example,\r\nglobal setting constant such as locale, language, currency etc.\r\n\r\n##Implementation\r\nUsing [dispatch_once](https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man3/dispatch_once_f.3.html) (Objective-C approach), if you are interested [Singletons in Objective-C](http://www.galloway.me.uk/tutorials/singleton-classes/). Like the name say, this function will execute block only once. We utilize this by put initialise code inside dispatch_once.\r\n\r\n```swift\r\nclass Singleton {\r\n\r\n  class var sharedInstance : Singleton {\r\n    struct Static {\r\n        static var onceToken : dispatch_once_t = 0\r\n        static var instance : Const? = nil\r\n    }\r\n    dispatch_once(&Static.onceToken) {\r\n        Static.instance = Const()\r\n    }\r\n    return Static.instance!\r\n  }\r\n  \r\n}\r\n```\r\n###Using Example\r\n```swift\r\nvar global_instance:Singleton = Singleton.sharedInstance\r\n```\r\n\r\nWhat happened here is when we call `Singleton.sharedInstance`, Static.instance will be initialised once and only once. Later when we try to access `Singleton.sharedInstance`, we shall get an exact same instance.  \r\n\r\n\r\n\r\n\r\n\r\n##Example\r\n```\r\n- Const\r\n  - Category1\r\n    - key : value \r\n    - key : value \r\n    - key : value \r\n  - Category2\r\n    - key : value \r\n    - key : value \r\n  - Category3\r\n    - key : value \r\n    - key : value \r\n    - key : value \r\n```\r\n\r\n```swift\r\nclass ConstSingleton {\r\n    private var constant = Dictionary<String, Dictionary<String,String>>()\r\n    \r\n    func getConst(type:String, key: String) -> String? {\r\n        if constant.isEmpty || constant[type] == nil{\r\n            return nil\r\n        }\r\n        else {\r\n            var myConst = constant[type]\r\n            if myConst?[key] != nil {\r\n                return myConst?[key]\r\n            }\r\n        }\r\n        return nil\r\n    }\r\n    \r\n    func setConst(type:String, key: String, value: String) -> Bool? {\r\n        var success:Bool\r\n        if constant.isEmpty || constant[type] == nil{\r\n            var newConst = [key : value]\r\n            if let unwrappedPreviousValue = constant.updateValue(newConst, forKey: type) {\r\n                println(\"Replaced the previous value: \\(unwrappedPreviousValue)\")\r\n            } else{\r\n                println(\"Added a new value\")\r\n            }\r\n        }\r\n        else{\r\n            if let unwrappedPreviousValue = constant[type]?.updateValue(value, forKey: key) {\r\n                println(\"Replaced the previous value: \\(unwrappedPreviousValue)\")\r\n            } else {\r\n                println(\"Added a new value\")\r\n            }\r\n            \r\n        }\r\n        return true\r\n    }\r\n    \r\n    class var sharedInstance : ConstSingleton {\r\n        struct Static {\r\n            static var onceToken : dispatch_once_t = 0\r\n            static var instance : ConstSingleton? = nil\r\n        }\r\n        dispatch_once(&Static.onceToken) {\r\n            Static.instance = ConstSingleton()\r\n        }\r\n        return Static.instance!\r\n    }\r\n}\r\n```\r\n\r\nPs. Sorry for my English : )\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}